# Multi-stage Dockerfile for Backstage IDP
FROM node:20-bookworm-slim AS packages

WORKDIR /app
COPY package.json yarn.lock ./
COPY .yarnrc.yml ./
COPY .yarn ./.yarn

COPY packages packages

# Comment this out if you don't have any internal plugins
# COPY plugins plugins

RUN --mount=type=cache,target=/root/.yarn-berry/cache,sharing=locked \
    yarn workspaces focus --all --production

FROM node:20-bookworm-slim AS build

# Set Python interpreter for `node-gyp` to use
ENV PYTHON=/usr/bin/python3

# Install isolate-vm dependencies, these are needed by the @backstage/plugin-scaffolder-backend.
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && \
    apt-get install -y --no-install-recommends python3 g++ build-essential && \
    rm -rf /var/lib/apt/lists/*

# Install sqlite3 dependencies. You can skip this if you don't use sqlite3 in the image,
# in which case you should also move better-sqlite3 to "devDependencies" in package.json.
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && \
    apt-get install -y --no-install-recommends libsqlite3-dev && \
    rm -rf /var/lib/apt/lists/*

USER node
WORKDIR /app

COPY --from=packages --chown=node:node /app .

# Comment this out if you don't have any internal plugins
# COPY --chown=node:node plugins plugins

COPY --chown=node:node packages packages
COPY --chown=node:node catalog-info.yaml ./
COPY --chown=node:node backstage.json package.json app-config*.yaml ./

RUN --mount=type=cache,target=/root/.yarn-berry/cache,sharing=locked \
    yarn install --immutable

RUN yarn tsc
RUN yarn build:backend --config ../../app-config.yaml

FROM node:20-bookworm-slim

# Install sqlite3 dependencies. You can skip this if you don't use sqlite3 in the image,
# in which case you should also move better-sqlite3 to "devDependencies" in package.json.
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && \
    apt-get install -y --no-install-recommends libsqlite3-dev python3 && \
    rm -rf /var/lib/apt/lists/*

# From here on we use the least-privileged `node` user to run the backend.
USER node

# This should create the app dir as `node`.
# If it is instead created as `root` then the `tar` command below will fail: `can't create directory 'packages/': Permission denied`.
# If this occurs, then ensure BuildKit is enabled (`DOCKER_BUILDKIT=1`) so the app dir is correctly created as `node`.
WORKDIR /app

# Copy the install dependencies from the build stage and context
COPY --from=build --chown=node:node /app/yarn.lock /app/package.json /app/
COPY --from=build --chown=node:node /app/.yarn /app/.yarn
COPY --from=build --chown=node:node /app/.yarnrc.yml /app/

# Copy built packages from the build stage
COPY --from=build --chown=node:node /app/packages /app/packages

# Copy any other files that the backend needs to run
COPY --chown=node:node app-config*.yaml ./

# This switches many Node.js dependencies to production mode.
ENV NODE_ENV=production

EXPOSE 7007

# Node.js v20+ compatibility for Backstage
ENV NODE_OPTIONS="--no-node-snapshot"

CMD ["node", "packages/backend", "--config", "app-config.yaml"]
