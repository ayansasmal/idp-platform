apiVersion: v1
kind: ConfigMap
metadata:
  name: webapp-manifest-templates
  namespace: idp-system
  labels:
    app.kubernetes.io/name: webapp-manifest-generator
    app.kubernetes.io/part-of: idp-platform
data:
  webapp-deployment.yaml: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: "{{ .Values.appName }}"
      namespace: "{{ .Values.namespace }}"
      labels:
        app.kubernetes.io/name: "{{ .Values.appName }}"
        app.kubernetes.io/managed-by: idp-platform
        platform.idp/environment: "{{ .Values.environment }}"
        platform.idp/type: web-application
    spec:
      replicas: {{ .Values.replicas }}
      selector:
        matchLabels:
          app.kubernetes.io/name: "{{ .Values.appName }}"
      template:
        metadata:
          labels:
            app.kubernetes.io/name: "{{ .Values.appName }}"
            platform.idp/environment: "{{ .Values.environment }}"
            platform.idp/type: web-application
          annotations:
            sidecar.istio.io/inject: "true"
            prometheus.io/scrape: "{{ .Values.monitoring.enabled }}"
            prometheus.io/port: "{{ .Values.monitoring.port }}"
            prometheus.io/path: "{{ .Values.monitoring.path }}"
        spec:
          serviceAccountName: "{{ .Values.appName }}"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 2000
          containers:
          - name: app
            image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            ports:
            - name: http
              containerPort: {{ .Values.port }}
              protocol: TCP
            {{- if .Values.monitoring.enabled }}
            - name: metrics
              containerPort: {{ .Values.monitoring.port }}
              protocol: TCP
            {{- end }}
            env:
            - name: PORT
              value: "{{ .Values.port }}"
            - name: ENVIRONMENT
              value: "{{ .Values.environment }}"
            {{- if .Values.database.enabled }}
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.appName }}-db-credentials"
                  key: connection-string
            {{- end }}
            resources:
              limits:
                cpu: {{ .Values.resources.limits.cpu }}
                memory: {{ .Values.resources.limits.memory }}
              requests:
                cpu: {{ .Values.resources.requests.cpu }}
                memory: {{ .Values.resources.requests.memory }}
            livenessProbe:
              httpGet:
                path: /health
                port: http
              initialDelaySeconds: 30
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 3
            readinessProbe:
              httpGet:
                path: /ready
                port: http
              initialDelaySeconds: 5
              periodSeconds: 5
              timeoutSeconds: 3
              failureThreshold: 3
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                - ALL
          restartPolicy: Always
  webapp-service.yaml: |
    apiVersion: v1
    kind: Service
    metadata:
      name: "{{ .Values.appName }}"
      namespace: "{{ .Values.namespace }}"
      labels:
        app.kubernetes.io/name: "{{ .Values.appName }}"
        app.kubernetes.io/managed-by: idp-platform
        platform.idp/environment: "{{ .Values.environment }}"
        platform.idp/type: web-application
    spec:
      type: ClusterIP
      ports:
      - name: http
        port: 80
        targetPort: http
        protocol: TCP
      {{- if .Values.monitoring.enabled }}
      - name: metrics
        port: {{ .Values.monitoring.port }}
        targetPort: metrics
        protocol: TCP
      {{- end }}
      selector:
        app.kubernetes.io/name: "{{ .Values.appName }}"
  webapp-serviceaccount.yaml: |
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: "{{ .Values.appName }}"
      namespace: "{{ .Values.namespace }}"
      labels:
        app.kubernetes.io/name: "{{ .Values.appName }}"
        app.kubernetes.io/managed-by: idp-platform
        platform.idp/environment: "{{ .Values.environment }}"
    automountServiceAccountToken: false
  webapp-virtualservice.yaml: |
    {{- if .Values.ingress.enabled }}
    apiVersion: networking.istio.io/v1beta1
    kind: VirtualService
    metadata:
      name: "{{ .Values.appName }}"
      namespace: "{{ .Values.namespace }}"
      labels:
        app.kubernetes.io/name: "{{ .Values.appName }}"
        app.kubernetes.io/managed-by: idp-platform
        platform.idp/environment: "{{ .Values.environment }}"
    spec:
      hosts:
      - "{{ .Values.ingress.hostname }}"
      gateways:
      - istio-system/idp-gateway
      http:
      - match:
        - uri:
            prefix: /
        route:
        - destination:
            host: "{{ .Values.appName }}"
            port:
              number: 80
        timeout: 30s
        retries:
          attempts: 3
          perTryTimeout: 10s
    {{- end }}
  webapp-hpa.yaml: |
    {{- if .Values.autoscaling.enabled }}
    apiVersion: autoscaling/v2
    kind: HorizontalPodAutoscaler
    metadata:
      name: "{{ .Values.appName }}"
      namespace: "{{ .Values.namespace }}"
      labels:
        app.kubernetes.io/name: "{{ .Values.appName }}"
        app.kubernetes.io/managed-by: idp-platform
        platform.idp/environment: "{{ .Values.environment }}"
    spec:
      scaleTargetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: "{{ .Values.appName }}"
      minReplicas: {{ .Values.autoscaling.minReplicas }}
      maxReplicas: {{ .Values.autoscaling.maxReplicas }}
      metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: {{ .Values.autoscaling.targetCPUUtilization }}
      - type: Resource
        resource:
          name: memory
          target:
            type: Utilization
            averageUtilization: 70
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
          - type: Percent
            value: 10
            periodSeconds: 60
        scaleUp:
          stabilizationWindowSeconds: 60
          policies:
          - type: Percent
            value: 50
            periodSeconds: 60
    {{- end }}