apiVersion: v1
kind: ConfigMap
metadata:
  name: idp-cli-scripts
  namespace: idp-system
  labels:
    app.kubernetes.io/name: idp-cli
    app.kubernetes.io/part-of: idp-platform
data:
  create-webapp.sh: |
    #!/bin/bash
    
    # IDP Platform - Create Web Application
    # Usage: ./create-webapp.sh <app-name> <image> [options]
    
    set -e
    
    APP_NAME="${1:-}"
    IMAGE="${2:-nginx:latest}"
    NAMESPACE="${3:-development}"
    ENVIRONMENT="${4:-development}"
    REPLICAS="${5:-2}"
    
    if [ -z "$APP_NAME" ]; then
        echo "Error: Application name is required"
        echo "Usage: $0 <app-name> <image> [namespace] [environment] [replicas]"
        exit 1
    fi
    
    # Validate app name
    if [[ ! "$APP_NAME" =~ ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$ ]]; then
        echo "Error: App name must be lowercase alphanumeric with hyphens"
        exit 1
    fi
    
    echo "Creating WebApplication: $APP_NAME"
    echo "Image: $IMAGE"
    echo "Namespace: $NAMESPACE"
    echo "Environment: $ENVIRONMENT"
    echo "Replicas: $REPLICAS"
    echo
    
    # Generate hostname
    HOSTNAME="${APP_NAME}.${ENVIRONMENT}.idp.local"
    
    # Create namespace if it doesn't exist
    kubectl create namespace "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -
    kubectl label namespace "$NAMESPACE" istio-injection=enabled --overwrite
    
    # Create WebApplication resource
    cat <<EOF | kubectl apply -f -
    apiVersion: platform.idp/v1alpha1
    kind: WebApplication
    metadata:
      name: $APP_NAME
      namespace: $NAMESPACE
      labels:
        app.kubernetes.io/name: $APP_NAME
        platform.idp/created-by: idp-cli
    spec:
      appName: $APP_NAME
      image:
        repository: ${IMAGE%:*}
        tag: ${IMAGE##*:}
        pullPolicy: IfNotPresent
      replicas: $REPLICAS
      port: 80
      environment: $ENVIRONMENT
      resources:
        requests:
          cpu: "100m"
          memory: "128Mi"
        limits:
          cpu: "500m"
          memory: "512Mi"
      autoscaling:
        enabled: true
        minReplicas: $REPLICAS
        maxReplicas: $(($REPLICAS * 3))
        targetCPUUtilization: 70
      ingress:
        enabled: true
        hostname: $HOSTNAME
        tls: true
      database:
        enabled: false
      monitoring:
        enabled: true
        metrics:
          enabled: true
          path: "/metrics"
          port: 9090
    EOF
    
    echo
    echo "‚úÖ WebApplication '$APP_NAME' created successfully!"
    echo "üåê URL: https://$HOSTNAME"
    echo "üìä Monitor: kubectl get webapp $APP_NAME -n $NAMESPACE"
    echo
    echo "To add to /etc/hosts for local access:"
    echo "echo '127.0.0.1 $HOSTNAME' | sudo tee -a /etc/hosts"
  
  delete-webapp.sh: |
    #!/bin/bash
    
    # IDP Platform - Delete Web Application
    # Usage: ./delete-webapp.sh <app-name> [namespace]
    
    set -e
    
    APP_NAME="${1:-}"
    NAMESPACE="${2:-development}"
    
    if [ -z "$APP_NAME" ]; then
        echo "Error: Application name is required"
        echo "Usage: $0 <app-name> [namespace]"
        exit 1
    fi
    
    echo "Deleting WebApplication: $APP_NAME in namespace $NAMESPACE"
    
    # Check if the WebApplication exists
    if ! kubectl get webapp "$APP_NAME" -n "$NAMESPACE" >/dev/null 2>&1; then
        echo "Error: WebApplication '$APP_NAME' not found in namespace '$NAMESPACE'"
        exit 1
    fi
    
    # Confirm deletion
    read -p "Are you sure you want to delete '$APP_NAME'? (y/N): " confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo "Deletion cancelled"
        exit 0
    fi
    
    # Delete the WebApplication
    kubectl delete webapp "$APP_NAME" -n "$NAMESPACE"
    
    echo "‚úÖ WebApplication '$APP_NAME' deleted successfully!"
  
  list-webapps.sh: |
    #!/bin/bash
    
    # IDP Platform - List Web Applications
    # Usage: ./list-webapps.sh [namespace]
    
    NAMESPACE="${1:-}"
    
    if [ -z "$NAMESPACE" ]; then
        echo "üìã All WebApplications across namespaces:"
        kubectl get webapp --all-namespaces
    else
        echo "üìã WebApplications in namespace: $NAMESPACE"
        kubectl get webapp -n "$NAMESPACE"
    fi
    
    echo
    echo "üîç For detailed view: kubectl describe webapp <name> -n <namespace>"
  
  webapp-status.sh: |
    #!/bin/bash
    
    # IDP Platform - WebApplication Status
    # Usage: ./webapp-status.sh <app-name> [namespace]
    
    APP_NAME="${1:-}"
    NAMESPACE="${2:-development}"
    
    if [ -z "$APP_NAME" ]; then
        echo "Error: Application name is required"
        echo "Usage: $0 <app-name> [namespace]"
        exit 1
    fi
    
    echo "üîç Status for WebApplication: $APP_NAME"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # WebApplication status
    echo "üì± WebApplication:"
    kubectl get webapp "$APP_NAME" -n "$NAMESPACE" -o wide
    
    echo
    echo "üöÄ Deployment:"
    kubectl get deployment "$APP_NAME" -n "$NAMESPACE" -o wide 2>/dev/null || echo "  No deployment found"
    
    echo
    echo "üîó Service:"
    kubectl get svc "$APP_NAME" -n "$NAMESPACE" -o wide 2>/dev/null || echo "  No service found"
    
    echo
    echo "üåê VirtualService:"
    kubectl get virtualservice "$APP_NAME" -n "$NAMESPACE" -o wide 2>/dev/null || echo "  No virtualservice found"
    
    echo
    echo "üìà HPA:"
    kubectl get hpa "$APP_NAME" -n "$NAMESPACE" -o wide 2>/dev/null || echo "  No HPA found"
    
    echo
    echo "üèÉ Pods:"
    kubectl get pods -l "app.kubernetes.io/name=$APP_NAME" -n "$NAMESPACE" 2>/dev/null || echo "  No pods found"