apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: docker-build-push
  namespace: argo-workflows
  labels:
    app: argo-workflows
    template-type: docker-build
spec:
  entrypoint: build-and-push
  arguments:
    parameters:
    - name: repo-url
      value: ""
    - name: revision
      value: "main"
    - name: image-name
      value: ""
    - name: image-tag
      value: "latest"
    - name: dockerfile-path
      value: "Dockerfile"
    - name: build-context
      value: "."
    - name: ecr-registry
      value: "000000000000.dkr.ecr.us-east-1.localhost.localstack.cloud:4566"
    - name: aws-region
      value: "us-east-1"
  templates:
  - name: build-and-push
    steps:
    - - name: checkout-source
        template: git-checkout
        arguments:
          parameters:
          - name: repo-url
            value: "{{workflow.parameters.repo-url}}"
          - name: revision
            value: "{{workflow.parameters.revision}}"
    - - name: docker-build
        template: docker-build-step
        arguments:
          parameters:
          - name: image-name
            value: "{{workflow.parameters.image-name}}"
          - name: image-tag
            value: "{{workflow.parameters.image-tag}}"
          - name: dockerfile-path
            value: "{{workflow.parameters.dockerfile-path}}"
          - name: build-context
            value: "{{workflow.parameters.build-context}}"
          - name: ecr-registry
            value: "{{workflow.parameters.ecr-registry}}"
          - name: aws-region
            value: "{{workflow.parameters.aws-region}}"
          artifacts:
          - name: source-code
            from: "{{steps.checkout-source.outputs.artifacts.source-code}}"

  - name: git-checkout
    inputs:
      parameters:
      - name: repo-url
      - name: revision
    outputs:
      artifacts:
      - name: source-code
        path: /workspace
    container:
      image: alpine/git:latest
      command: [sh, -c]
      args:
        - |
          set -e
          echo "Cloning repository {{inputs.parameters.repo-url}}"
          git clone {{inputs.parameters.repo-url}} /workspace
          cd /workspace
          git checkout {{inputs.parameters.revision}}
          echo "Repository cloned successfully"
          ls -la /workspace
      workingDir: /workspace
      volumeMounts:
      - name: workspace
        mountPath: /workspace

  - name: docker-build-step
    inputs:
      parameters:
      - name: image-name
      - name: image-tag
      - name: dockerfile-path
      - name: build-context
      - name: ecr-registry
      - name: aws-region
      artifacts:
      - name: source-code
        path: /workspace
    container:
      image: docker:24-dind
      command: [sh, -c]
      args:
        - |
          set -e
          
          # Start Docker daemon
          dockerd &
          sleep 10
          
          # Install AWS CLI for ECR authentication
          apk add --no-cache aws-cli curl
          
          # Configure AWS for LocalStack
          export AWS_ACCESS_KEY_ID=test
          export AWS_SECRET_ACCESS_KEY=test
          export AWS_DEFAULT_REGION={{inputs.parameters.aws-region}}
          
          # Login to ECR (LocalStack)
          echo "Logging into ECR..."
          aws --endpoint-url=http://localstack:4566 ecr get-login-password | docker login --username AWS --password-stdin {{inputs.parameters.ecr-registry}}
          
          # Build Docker image
          cd /workspace/{{inputs.parameters.build-context}}
          echo "Building Docker image..."
          docker build -f {{inputs.parameters.dockerfile-path}} -t {{inputs.parameters.image-name}}:{{inputs.parameters.image-tag}} .
          
          # Tag for ECR
          docker tag {{inputs.parameters.image-name}}:{{inputs.parameters.image-tag}} {{inputs.parameters.ecr-registry}}/{{inputs.parameters.image-name}}:{{inputs.parameters.image-tag}}
          
          # Push to ECR
          echo "Pushing image to ECR..."
          docker push {{inputs.parameters.ecr-registry}}/{{inputs.parameters.image-name}}:{{inputs.parameters.image-tag}}
          
          echo "Image pushed successfully: {{inputs.parameters.ecr-registry}}/{{inputs.parameters.image-name}}:{{inputs.parameters.image-tag}}"
      privileged: true
      volumeMounts:
      - name: workspace
        mountPath: /workspace
      - name: docker-sock
        mountPath: /var/run/docker.sock
      env:
      - name: DOCKER_HOST
        value: unix:///var/run/docker.sock
      resources:
        requests:
          memory: "1Gi"
          cpu: "500m"
        limits:
          memory: "2Gi"
          cpu: "1"

  volumes:
  - name: workspace
    emptyDir: {}
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
      type: Socket

  serviceAccountName: docker-builder