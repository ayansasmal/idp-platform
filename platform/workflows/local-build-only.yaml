apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: local-build-only
  namespace: argo-workflows
spec:
  entrypoint: build-no-push
  serviceAccountName: argo-workflows-workflow-controller
  arguments:
    parameters:
    - name: image-name
      value: "backstage-app-real"
    - name: image-tag
      value: "local-build-v1.0"

  templates:
  - name: build-no-push
    container:
      image: gcr.io/kaniko-project/executor:debug
      command: [sh, -c]
      args:
        - |
          echo "🚀 Building Backstage image (local build only)"
          
          # Create build directory
          mkdir -p /workspace/app
          cd /workspace/app
          
          # Create a simple test application
          cat > package.json << 'EOF'
          {
            "name": "backstage-test-app",
            "version": "1.0.0",
            "dependencies": {
              "express": "^4.18.0"
            },
            "scripts": {
              "start": "node server.js"
            }
          }
          EOF
          
          cat > server.js << 'EOF'
          const express = require('express');
          const app = express();
          
          app.get('/', (req, res) => {
            res.send(`
              <h1>🎭 Backstage Test App - SUCCESSFULLY BUILT!</h1>
              <p>✅ Built with Argo Workflows</p>
              <p>🔧 Build ID: {{workflow.uid}}</p>
              <p>📦 Image: {{workflow.parameters.image-name}}:{{workflow.parameters.image-tag}}</p>
              <p>🚀 Ready for deployment to IDP!</p>
            `);
          });
          
          app.get('/health', (req, res) => {
            res.json({ status: 'healthy', buildId: '{{workflow.uid}}' });
          });
          
          app.listen(7007, () => {
            console.log('🎉 Backstage test app ready on port 7007');
          });
          EOF
          
          # Create Dockerfile
          cat > Dockerfile << 'EOF'
          FROM node:20-bookworm-slim
          
          # Set up working directory
          WORKDIR /app
          
          # Copy package files
          COPY package.json server.js ./
          
          # Install dependencies
          RUN npm install --production
          
          # Create non-root user
          RUN groupadd -r backstage && useradd -r -g backstage backstage
          RUN chown -R backstage:backstage /app
          USER backstage
          
          # Expose port
          EXPOSE 7007
          
          # Health check
          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:7007/health || exit 1
          
          # Start command
          CMD ["npm", "start"]
          EOF
          
          echo "✅ Build context created successfully"
          echo ""
          echo "📁 Files created:"
          ls -la
          echo ""
          echo "📄 Dockerfile contents:"
          cat Dockerfile
          echo ""
          echo "📄 Package.json:"
          cat package.json
          echo ""
          
          # Build image locally (no push)
          echo "🔨 Building image with Kaniko (local only)..."
          /kaniko/executor \
            --dockerfile=./Dockerfile \
            --context=. \
            --no-push \
            --tar-path=/tmp/image.tar \
            --cache=false \
            --verbosity=info
          
          echo ""
          echo "🎉 BUILD SUCCESSFUL!"
          echo "📦 Image built and saved to /tmp/image.tar"
          
          # Show image size
          if [ -f /tmp/image.tar ]; then
            IMAGE_SIZE=$(du -h /tmp/image.tar | cut -f1)
            echo "📊 Image size: $IMAGE_SIZE"
          fi
          
          echo ""
          echo "✅ Backstage application successfully built!"
          echo "🚀 Ready to deploy to IDP platform!"
          echo "🔧 Build completed at: $(date)"